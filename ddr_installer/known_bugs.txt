1) Injection for 32bit processes which are launching 64bit child processes
There is an issue with DynamoRIO in the moment. It doesn't support injection for 32bit processes which are launching
64bit child processes. A Scenario which some of the test samples above are doing e.g. testsample2_32.exe launches notepad.exe
which could be 64bit process depending on the OS you are running it on.
You can still analyse those processes with DDR, the only caveat is that DDR (or better the underlying DynmaoRIO) is not recognizing 
the 64bit processes in this scenario and thou will not trace any data for it. The initial 32bit process is still analysed.

If you run in such a scenario and want to verify it, you could run DynamoRio in debug mode e.g. :

C:\tools\DDR\DynamoRIO-Windows-8.0.0-1\bin32\drrun.exe -debug -checklevel 0 -loglevel 2 -- testsample32.exe

this will write a detailed logging file to C:\tools\DDR\DynamoRIO-Windows-8.0.0-1\logs\<name of process>\log.<some number>.html

You can find an entry like this one in it:

--- snip ---
syscall: NtCreateUserProcess presys \??\C:\windows\write.exe
Exit from system call
post syscall: sysnum=0x000000aa, params @0x0016f22c, result=0x00000000
syscall: NtCreateUserProcess => 0x0
syscall: NtCreateUserProcess created process 0x848 with main thread 0xd28
WARNING: make_writable 0x73dc6000: param size 0x3f000 vs. mbi size 0x2c000 base 0x73dc6000
WARNING: make_writable 0x73df2000: param size 0x13000 vs. mbi size 0x7000 base 0x73df2000
WARNING: make_unwritable 0x73dc6000: param size 0x3f000 vs. mbi size 0x2c000 base 0x73dc6000
WARNING: make_unwritable 0x73df2000: param size 0x13000 vs. mbi size 0x7000 base 0x73df2000
SYSLOG_WARNING: Injecting from 32-bit into 64-bit process is not yet supported.
syscall: NtCreateUserProcess: WARNING: failed to get cxt of thread (0xc000000d) so can't follow children on WOW64.
--- snip ---

Luckily for malware analysis, this scenario is not happening very often.

You can find more infos at https://blog.talosintelligence.com/ search for DDR or Dynamic
Data Resolver to find the latest blog about DDR.

===========================================================================================================================================================

2) Under certain rare contitions the client DLL is crashing if you have NOP'ed out instructions. This bug is under investigation. A
dirty workaround is to clear the configuration in IDA (DDR/Config/Clear configured DDR request) and re-run the sample again. 

===========================================================================================================================================================

3) AMD CPU bug
There is a DDR independent AMD CPU bug which crashes the DynamoRio framework if a 32bit sample is executed on a 64bit machine and the WoW64 architecture is switching between the 32 and 64 bit world. The issue is identified and the root cause found. The DynamoRio team has released a special build here <https://github.com/DynamoRIO/dynamorio/releases/tag/cronbuild-8.0.18547> which fixes the issue. You can download it and replace the original DynamoRio directory with this one. Unzip DynamoRIO-Windows-8.0.18547.zip and rename or backup the old directory (C:\tools\DDR\DynamoRIO-Windows-8.0.0-1), give the downloaded one the same name like the old one and move it to the same place.

You can read more details here <https://github.com/DynamoRIO/dynamorio/issues/4091#>. The bug is confirmed on Ryzen CPUs, but may also occur on other AMD CPUs. We haven’t seen any issues on Intel CPUs. 

In some cases, a possible workaround, until we have an updated version of DynamoRio, is to set MaxLoaderThreads to 1 in HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\<name of your sample.exe>

===========================================================================================================================================================

4) Access violations from 'dynamorio!safe_read_asm_xxx' functions are expected and can be ignored in WinDbg.They are caused by the way DynamoRio has implemented these functions (Try-Except).They are handled by DynamoRio internally if you haven’t attached a debugger. In In WinDbg, just proceed (F5) if something like below happens:

WinDbg Console:
(1df0.1a28) : Access violation - code c0000005(first chance)
         First chance exceptions are reported before any exception handling.
         This exception may be expected and handled.
         dynamorio!safe_read_asm_pre

The functions are heavily used in DDR, so you might see a lot of these exceptions. You can filter them by disable Access Violations in WInDbg. Most serious exceptions will still break into the debugger.

===========================================================================================================================================================
